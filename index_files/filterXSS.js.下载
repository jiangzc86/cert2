(function e(){
  function getDefaultWhiteList(){
    return {
      a:["target","href","title"],
      abbr:["title"],
      address:[],
      area:["shape","coords","href","alt"],
      article:[],
      aside:[],
      audio:["autoplay","controls","loop","preload","src"],
      b:[],
      bdi:["dir"],
      bdo:["dir"],
      big:[],
      blockquote:["cite"],
      br:[],
      caption:[],
      center:[],
      cite:[],
      code:[],
      col:["align","valign","span","width"],
      colgroup:["align","valign","span","width"],
      dd:[],
      del:["datetime"],
      details:["open"],
      div:[],
      dl:[],
      dt:[],
      em:[],
      font:["color","size","face"],
      footer:[],
      h1:[],
      h2:[],
      h3:[],
      h4:[],
      h5:[],
      h6:[],
      header:[],
      hr:[],
      i:[],
      img:["src","alt","title","width","height"],
      ins:["datetime"],
      li:[],
      mark:[],
      nav:[],
      ol:[],
      p:[],
      pre:[],
      s:[],
      section:[],
      small:[],
      span:[],
      sub:[],
      sup:[],
      strong:[],
      table:["width","border","align","valign"],
      tbody:["align","valign"],
      td:["width","rowspan","colspan","align","valign"],
      tfoot:["align","valign"],
      th:["width","rowspan","colspan","align","valign"],
      thead:["align","valign"],
      tr:["rowspan","align","valign"],
      tt:[],
      u:[],
      ul:[],
      video:["autoplay","controls","loop","preload","src","height","width"],
      script:[],
      style:[],
      link:[]
    };
  }

  var whiteList = getDefaultWhiteList();

  function spaceIndex(str){
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match?match.index:- 1;
  }

  function indexOf(arr,item){
    var i,j;
    if(Array.prototype.indexOf){
      return arr.indexOf(item);
    }
    for(i = 0, j = arr.length; i < j; i ++){
      if(arr[i] === item){
        return i;
      }
    }
    return - 1;
  }

  function forEach(arr,fn,scope){
    var i,j;
    if(Array.prototype.forEach){
      return arr.forEach(fn,scope);
    }
    for(i = 0, j = arr.length; i < j; i ++){
      fn.call(scope,arr[i],i,arr);
    }
  }

  function trim(str){
    if(String.prototype.trim){
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g,"");
  }

  function getTagName(html){
    var i = spaceIndex(html);
    if(i === - 1){
      var tagName = html.slice(1,- 1);
    }else{
      var tagName = html.slice(1,i + 1);
    }
    tagName = trim(tagName).toLowerCase();
    if(tagName.slice(0,1) === '/'){
      tagName = tagName.slice(1);
    }
    if(tagName.slice(- 1) === '/'){
      tagName = tagName.slice(0,- 1);
    }

    return tagName;
  }

  function isClosing(html) {
    return html.slice(0, 2) === "</";
  }

  function onTag(tag, html, options) {
    // do nothing
  }

  function parseTag(html, onTag, escapeHtml) {
    "use strict";

    var rethtml = "";
    var lastPos = 0;
    var tagStart = false;
    var quoteStart = false;
    var currentPos = 0;
    var len = html.length;
    var currentTagName = "";
    var currentHtml = "";

    for (currentPos = 0; currentPos < len; currentPos++) {
      var c = html.charAt(currentPos);
      if (tagStart === false) {
        if (c === "<") {
          tagStart = currentPos;
          continue;
        }
      } else {
        if (quoteStart === false) {
          if (c === "<") {
            rethtml += escapeHtml(html.slice(lastPos, currentPos));
            tagStart = currentPos;
            lastPos = currentPos;
            continue;
          }
          if (c === ">") {
            rethtml += HTMLEncode(html.slice(lastPos,tagStart));
            
            currentHtml = html.slice(tagStart, currentPos + 1);
            currentTagName = getTagName(currentHtml);
            rethtml += onTag(
              tagStart,
              rethtml.length,
              currentTagName,
              currentHtml,
              isClosing(currentHtml)
            );
            lastPos = currentPos + 1;
            tagStart = false;
            continue;
          }
          if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
            quoteStart = c;
            continue;
          }
        } else {
          if (c === quoteStart) {
            quoteStart = false;
            continue;
          }
        }
      }
    }
    if (lastPos < html.length) {
      rethtml += HTMLEncode(html.substr(lastPos));
    }

    return rethtml;
  }

//将code为不可见的字符从字符串中删掉
  function stripBlankChar(html){
    var chars = html.split("");
    var retchars = [];

    for(var i = 0; i < chars.length; i ++){
      var c = chars[i].charCodeAt(0);
      if(c === 127){
        continue;
      }
      if(c <= 31){
        if(c === 10 || c === 13){
          retchars.push(chars[i]);
        }
        continue;
      }

      retchars.push(chars[i]);
    }

    return retchars.join("");
  }

  function stripCommentTag(html){
    return html.replace(STRIP_COMMENT_TAG_REGEXP,"");
  }

  var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;

  function isNull(obj){
    return obj === undefined || obj === null;
  }

  function getAttrs(html){
    var i = spaceIndex(html);
    if(i === - 1){
      return {
        html:'',
        closing:html[html.length - 2] === '/'
      };
    }

    html = trim(html.slice(i + 1,- 1));
    var isClosing = html[html.length - 1] === '/';
    if(isClosing){
      html = trim(html.slice(0,- 1));
    }
    return {
      html:html,
      closing:isClosing
    }
  }

  function findBeforeEqual(str,i){
    for(; i > 0; i --){
      var c = str[i];
      if(c === " ") continue;
      if(c === "=") return i;
      return - 1;
    }
  }

  function isQuoteWrapString(text){
    if(
      (text[0] === '"' && text[text.length - 1] === '"') ||
      (text[0] === "'" && text[text.length - 1] === "'")
    ){
      return true;
    }else{
      return false;
    }
  }

  function stripQuoteWrap(text){
    if(isQuoteWrapString(text)){
      return text.substr(1,text.length - 2);
    }else{
      return text;
    }
  }

  function findNextEqual(str, i) {
    for (; i < str.length; i++) {
      var c = str[i];
      if (c === " ") continue;
      if (c === "=") return i;
      return -1;
    }
  }

  var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
  function parseAttr(html, onAttr) {
    "use strict";

    var lastPos = 0;
    var retAttrs = [];
    var tmpName = false;
    var len = html.length;

    function addAttr(name, value) {
      name = trim(name);
      name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
      if (name.length < 1) return;
      var ret = onAttr(name, value || "");
      if (ret) retAttrs.push(ret);
    }

    // 逐个分析字符
    for (var i = 0; i < len; i++) {
      var c = html.charAt(i);
      var v, j;
      if (tmpName === false && c === "=") {
        tmpName = html.slice(lastPos, i);
        lastPos = i + 1;
        continue;
      }
      if (tmpName !== false) {
        if (
          i === lastPos &&
          (c === '"' || c === "'") &&
          html.charAt(i - 1) === "="
        ) {
          j = html.indexOf(c, i + 1);
          if (j === -1) {
            break;
          } else {
            v = trim(html.slice(lastPos + 1, j));
            addAttr(tmpName, v);
            tmpName = false;
            i = j;
            lastPos = i + 1;
            continue;
          }
        }
      }
      if (/\s|\n|\t/.test(c)) {
        html = html.replace(/\s|\n|\t/g, " ");
        if (tmpName === false) {
          j = findNextEqual(html, i);
          if (j === -1) {
            v = trim(html.slice(lastPos, i));
            addAttr(v);
            tmpName = false;
            lastPos = i + 1;
            continue;
          } else {
            i = j - 1;
            continue;
          }
        } else {
          j = findBeforeEqual(html, i - 1);
          if (j === -1) {
            v = trim(html.slice(lastPos, i));
            v = stripQuoteWrap(v);
            addAttr(tmpName, v);
            tmpName = false;
            lastPos = i + 1;
            continue;
          } else {
            continue;
          }
        }
      }
    }

    if (lastPos < html.length) {
      if (tmpName === false) {
        addAttr(html.slice(lastPos));
      } else {
        addAttr(tmpName, stripQuoteWrap(trim(html.slice(lastPos))));
      }
    }

    return trim(retAttrs.join(" "));
  }

  var REGEXP_LT = /</g;
  var REGEXP_GT = />/g;
  function escapeHtml(html) {
    return html.replace(REGEXP_LT, "《").replace(REGEXP_GT, "》");
  }
  function escapeTextHtml(html) {
    return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
  }
  function HTMLEncode(html) {
    var temp = document.createElement("div");
    (temp.textContent != null) ? (temp.textContent = html) : (temp.innerText = html);
    var output = temp.innerHTML;
    temp = null;
    return output;
  }

  function onTagAttr(tag, name, value) {
    // do nothing
  }

// RegExp list
  var REGEXP_QUOTE = /"/g;
  var REGEXP_QUOTE_2 = /&quot;/g;
  var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
  var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
  var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
  var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
  var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

  function unescapeQuote(str) {
    return str.replace(REGEXP_QUOTE_2, '"');
  }

  function onIgnoreTagAttr(tag, name, value) {
    // do nothing
  }

  function escapeHtmlEntities(str) {
    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
      return code[0] === "x" || code[0] === "X"
        ? String.fromCharCode(parseInt(code.substr(1), 16))
        : String.fromCharCode(parseInt(code, 10));
    });
  }

  function escapeDangerHtml5Entities(str) {
    return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
  }

  function clearNonPrintableCharacter(str) {
    var str2 = "";
    for (var i = 0, len = str.length; i < len; i++) {
      str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
    }
    return trim(str2);
  }

  function friendlyAttrValue(str) {
    str = unescapeQuote(str);
    str = escapeHtmlEntities(str);
    str = escapeDangerHtml5Entities(str);
    str = clearNonPrintableCharacter(str);
    return str;
  }

  function escapeQuote(str) {
    return str.replace(REGEXP_QUOTE, "&quot;");
  }

  function escapeAttrValue(str) {
    str = escapeQuote(str);
    str = escapeHtml(str);
    return str;
  }

  function safeAttrValue(tag, name, value) {
    // unescape attribute value firstly
    value = friendlyAttrValue(value);

    if (name === "href" || name === "src") {
      // filter `href` and `src` attribute
      // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
      value = trim(value);
      if (value === "#") return "#";
      if (
        !(
          value.substr(0, 7) === "http://" ||
          value.substr(0, 8) === "https://" ||
          value.substr(0, 7) === "mailto:" ||
          value.substr(0, 4) === "tel:" ||
          value[0] === "#" ||
          value[0] === "/"
        )
      ) {
        return "";
      }
    } else if (name === "background") {
      // filter `background` attribute (maybe no use)
      // `javascript:`
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    } else if (name === "style") {
      // `expression()`
      REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
        return "";
      }
      // `url()`
      REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
          return "";
        }
      }
    }

    // escape `<>"` before returns
    value = escapeAttrValue(value);
    return value;
  }

  function main(html){
    // compatible with the input
    html = html || "";
    html = html.toString();
    if (!html) return "";

    var me = this;

    html = stripBlankChar(html);
    html = stripCommentTag(html);

    var retHtml = parseTag(
      html,
      function(sourcePosition, position, tag, html, isClosing) {
        var info = {
          sourcePosition: sourcePosition,
          position: position,
          isClosing: isClosing,
          isWhite: whiteList.hasOwnProperty(tag)
        };

        // call `onTag()`
        var ret = onTag(tag, html, info);
        if (!isNull(ret)) return ret;

        if (info.isWhite) {
          if (info.isClosing) {
            return "《/" + tag + "》";
          }

          var attrs = getAttrs(html);
          var whiteAttrList = whiteList[tag];
          var attrsHtml = parseAttr(attrs.html, function(name, value) {
            // call `onTagAttr()`
            var isWhiteAttr = indexOf(whiteAttrList, name) !== -1;
            var ret = onTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;

            if (isWhiteAttr) {
              // call `safeAttrValue()`
              value = safeAttrValue(tag, name, value);
              if (value) {
                return name + '="' + value + '"';
              } else {
                return name;
              }
            } else {
              // call `onIgnoreTagAttr()`
              var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
              if (!isNull(ret)) return ret;
              return;
            }
          });

          // build new tag html
          var html = "《" + tag;
          if (attrsHtml) html += " " + attrsHtml;
          if (attrs.closing) html += " /";
          html += "》";
          return html;
        } else {
          // call `onIgnoreTag()`
          return HTMLEncode(html);
          // return html;
        }
      },
      escapeHtml
    );

    return retHtml;
  }
  
  if (typeof window !== "undefined") {
    window.filterXSS = main;
  }
})();